
import { useState, useEffect, useContext } from "react";
import Calendar from "react-calendar";
import { AuthContext } from "../context/AuthContext";
import { useFoodLog } from "../context/FoodLogContext";
                <p className="text-blue-200 text-xs">calories</p>
              </div>
              <div className="h-12 w-px bg-white/20"></div>
              <div className="text-center">
                <p className="text-blue-100 text-sm font-medium mb-1">Consumed</p>
                <p className="text-2xl font-bold text-white">{(totals?.calories || 0).toFixed(1)}</p>
                <p className="text-blue-200 text-xs">calories</p>
              </div>
              <div className="h-12 w-px bg-white/20"></div>
              <div className="text-center">
                <p className="text-blue-100 text-sm font-medium mb-1">Remaining</p>
                <p className="text-2xl font-bold text-white">{Math.max((nutrition?.calories || 1550) - (totals?.calories || 0), 0).toFixed(1)}</p>
                <p className="text-blue-200 text-xs">calories</p>"../context/FoodLogContext";
import API from "../api";
import "./CalendarTracker.css";

import NutritionProgress from "./NutritionProgress";

function ProgressBar({ label, value, goal, color }) {
  const percent = Math.min(Math.round((value / goal) * 100), 100);
  return (
    <div className="w-full">
      <div className="flex justify-between mb-1">
        <span className="text-sm font-semibold text-white">{label}</span>
        <span className="text-sm text-white">
          {Number(value).toFixed(1)} / {Number(goal).toFixed(1)}
        </span>
      </div>
      <div className="w-full bg-white/30 rounded-full h-4">
        <div
          className="h-4 rounded-full"
          style={{ width: percent + "%", background: color }}
        ></div>
      </div>
    </div>
  );
}

const CalendarTracker = () => {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [totals, setTotals] = useState(null);
  const [loading, setLoading] = useState(false);
  const { user } = useContext(AuthContext);
  const [nutrition, setNutrition] = useState(null);
  const { currentDayTotals, setTotals: setCurrentDayTotals } = useFoodLog();
  
  useEffect(() => {
    if (isSameDay(selectedDate, new Date()) && currentDayTotals) {
      const totalsWithDefaults = {
        calories: Number(currentDayTotals.calories || 0),
        protein: Number(currentDayTotals.protein || 0),
        carbs: Number(currentDayTotals.carbs || 0),
        fat: Number(currentDayTotals.fat || 0)
      };
      setTotals(totalsWithDefaults);
    }
  }, [currentDayTotals, selectedDate]);

  const tileClassName = ({ date, view }) => {
    if (view === 'month') {
      return 'rounded-lg hover:bg-blue-50 transition-colors';
    }
    return '';
  };

  const formatShortWeekday = (locale, date) => {
    const day = date.toLocaleDateString(locale, { weekday: 'short' });
    return day.charAt(0).toUpperCase() + day.slice(1);
  };

  useEffect(() => {
    const fetchNutrition = async () => {
      try {
        const userId = user?.user?.id || user?.id;
        const res = await API.get(`/goal/user`, { params: { userId } });
        console.log("logged in user data ", res);
        setNutrition(res.data);
      } catch (err) {
        console.error("Failed to fetch nutrition:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchNutrition();
  }, []);
  const fetchFoodLogsByDate = async (date) => {
    try {
      setLoading(true);
      // Format date in local time (YYYY-MM-DD)
      const formattedDate =
        date.getFullYear() +
        "-" +
        String(date.getMonth() + 1).padStart(2, "0") +
        "-" +
        String(date.getDate()).padStart(2, "0");
      const userId = user?.user?.id || user?.id;

      // Call your backend API with userId
      const res = await API.get(`/foodlogs/date`, {
        params: { date: formattedDate, userId },
      });

      // Filter logs to only those for the logged-in user (if backend doesn't already do this)
      const foodLogs = (res.data || []).filter((log) => {
        // log.user can be string or object
        const logUserId =
          typeof log.user === "object" ? log.user._id : log.user;
        return logUserId === userId;
      });

      // Calculate totals
      let totalCalories = 0;
      let totalProtein = 0;
      let totalCarbs = 0;
      let totalFat = 0;
      console.log(foodLogs);
      foodLogs.forEach((log) => {
        totalCalories += Number(log.calories) || 0;
        totalProtein += Number(log.protein) || 0;
        totalCarbs += Number(log.carbs) || 0;
        totalFat += Number(log.fat) || 0;
      });

      setTotals({
        calories: totalCalories,
        protein: totalProtein,
        carbs: totalCarbs,
        fat: totalFat,
      });
    } catch (err) {
      console.error("Error fetching food logs:", err);
      setTotals(null);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchFoodLogsByDate(selectedDate);
  }, [selectedDate]);

  const isSameDay = (date1, date2) => {
    return date1.getFullYear() === date2.getFullYear() &&
           date1.getMonth() === date2.getMonth() &&
           date1.getDate() === date2.getDate();
  };

  // Calculate calories left
  const caloriesGoal = nutrition?.calories || 1550;
  const caloriesConsumed = totals?.calories || 0;
  const caloriesLeft = Math.max(caloriesGoal - caloriesConsumed, 0);

  return (
    <div className="bg-white shadow-lg rounded-2xl overflow-hidden">
      {/* Header Section */}
      <div className="bg-gradient-to-br from-blue-600 via-blue-700 to-purple-700 px-6 py-8 relative overflow-hidden">
        {/* Background Pattern */}
        <div className="absolute inset-0 opacity-10">
          <div className="absolute inset-0" style={{
            backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
          }} />
        </div>

        <div className="relative z-10">
          {/* Title and Today's Summary */}
          <div className="flex flex-col md:flex-row items-start md:items-center justify-between mb-6">
            <div className="flex items-center gap-3 mb-4 md:mb-0">
              <div className="bg-white/10 p-3 rounded-2xl backdrop-blur-sm">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
                </svg>
              </div>
              <div>
                <h2 className="text-3xl font-bold text-white mb-1">Nutrition Dashboard</h2>
                <p className="text-blue-100 font-medium">Track your daily nutrition goals</p>
              </div>
            </div>

            <div className="bg-white/10 rounded-xl backdrop-blur-sm p-4 flex items-center gap-6">
              <div className="text-center">
                <p className="text-blue-100 text-sm font-medium mb-1">Daily Goal</p>
                <p className="text-2xl font-bold text-white">{(nutrition?.calories || 1550).toFixed(1)}</p>
                <p className="text-blue-200 text-xs">calories</p>
              </div>
              <div className="h-12 w-px bg-white/20"></div>
              <div className="text-center">
                <p className="text-blue-100 text-sm font-medium mb-1">Consumed</p>
                <p className="text-2xl font-bold text-white">{(totals?.calories || 0).toFixed(1)}</p>
                <p className="text-blue-200 text-xs">calories</p>
              </div>
              <div className="h-12 w-px bg-white/20"></div>
              <div className="text-center">
                <p className="text-blue-100 text-sm font-medium mb-1">Remaining</p>
                <p className="text-2xl font-bold text-white">{Math.max((nutrition?.calories || 1550) - (totals?.calories || 0), 0).toFixed(1)}</p>
                <p className="text-blue-200 text-xs">calories</p>
              </div>
            </div>
          </div>

          {/* Nutrition Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-white/10 rounded-xl backdrop-blur-sm p-6 flex items-center justify-between group hover:bg-white/20 transition-all duration-300">
              <div>
                <p className="text-blue-100 font-medium mb-1">Protein</p>
                <p className="text-2xl font-bold text-white">{(totals?.protein || 0).toFixed(1)}g</p>
                <p className="text-blue-200 text-sm">of {(nutrition?.protein || 50).toFixed(1)}g goal</p>
              </div>
              <div className="w-16 h-16 relative">
                <svg className="w-16 h-16 transform -rotate-90">
                  <circle
                    className="text-white/10"
                    strokeWidth="6"
                    stroke="currentColor"
                    fill="transparent"
                    r="26"
                    cx="32"
                    cy="32"
                  />
                  <circle
                    className="text-blue-300 transition-all duration-300"
                    strokeWidth="6"
                    strokeDasharray={164}
                    strokeDashoffset={164 - (164 * (totals?.protein || 0)) / (nutrition?.protein || 50)}
                    strokeLinecap="round"
                    stroke="currentColor"
                    fill="transparent"
                    r="26"
                    cx="32"
                    cy="32"
                  />
                </svg>
              </div>
            </div>

            <div className="bg-white/10 rounded-xl backdrop-blur-sm p-6 flex items-center justify-between group hover:bg-white/20 transition-all duration-300">
              <div>
                <p className="text-blue-100 font-medium mb-1">Carbs</p>
                <p className="text-2xl font-bold text-white">{Number(totals?.carbs || 0).toFixed(1)}g</p>
                <p className="text-blue-200 text-sm">of {Number(nutrition?.carbs || 250).toFixed(1)}g goal</p>
              </div>
              <div className="w-16 h-16 relative">
                <svg className="w-16 h-16 transform -rotate-90">
                  <circle
                    className="text-white/10"
                    strokeWidth="6"
                    stroke="currentColor"
                    fill="transparent"
                    r="26"
                    cx="32"
                    cy="32"
                  />
                  <circle
                    className="text-purple-300 transition-all duration-300"
                    strokeWidth="6"
                    strokeDasharray={164}
                    strokeDashoffset={164 - (164 * (totals?.carbs || 0)) / (nutrition?.carbs || 250)}
                    strokeLinecap="round"
                    stroke="currentColor"
                    fill="transparent"
                    r="26"
                    cx="32"
                    cy="32"
                  />
                </svg>
              </div>
            </div>

            <div className="bg-white/10 rounded-xl backdrop-blur-sm p-6 flex items-center justify-between group hover:bg-white/20 transition-all duration-300">
              <div>
                <p className="text-blue-100 font-medium mb-1">Fats</p>
                <p className="text-2xl font-bold text-white">{Number(totals?.fat || 0).toFixed(1)}g</p>
                <p className="text-blue-200 text-sm">of {Number(nutrition?.fat || 70).toFixed(1)}g goal</p>
              </div>
              <div className="w-16 h-16 relative">
                <svg className="w-16 h-16 transform -rotate-90">
                  <circle
                    className="text-white/10"
                    strokeWidth="6"
                    stroke="currentColor"
                    fill="transparent"
                    r="26"
                    cx="32"
                    cy="32"
                  />
                  <circle
                    className="text-green-300 transition-all duration-300"
                    strokeWidth="6"
                    strokeDasharray={164}
                    strokeDashoffset={164 - (164 * (totals?.fat || 0)) / (nutrition?.fat || 70)}
                    strokeLinecap="round"
                    stroke="currentColor"
                    fill="transparent"
                    r="26"
                    cx="32"
                    cy="32"
                  />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Calendar and nutrition details side by side */}
      <div className="px-5 pb-5">
        <div className="flex flex-col md:flex-row gap-5 items-start">
          {/* Calendar */}
          <div className="w-full md:w-[45%] bg-white rounded-2xl overflow-hidden">
            <Calendar
              onChange={setSelectedDate}
              value={selectedDate}
              formatShortWeekday={formatShortWeekday}
              tileClassName={tileClassName}
              navigationLabel={({ date, label }) => (
                <span className="text-xl font-semibold text-gray-800">
                  {label}
                </span>
              )}
              next2Label={null}
              prev2Label={null}
              nextLabel="›"
              prevLabel="‹"
            />
          </div>
          {/* Nutrition Detail  s & Meal Cards */}
          <div className="w-full md:w-[55%]">
            <div className="bg-white rounded-2xl p-5 shadow-sm">
              <h3 className="text-xl font-semibold text-gray-800 mb-5 flex items-center gap-2">
                <svg className="w-6 h-6 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                {selectedDate.toDateString()}
              </h3>
              {loading ? (
                <div className="flex items-center justify-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                </div>
              ) : totals ? (
                <div className="grid grid-cols-2 gap-3">
                  <div className="bg-blue-50 rounded-lg p-3">
                    <div className="text-blue-700 font-medium mb-1">Calories</div>
                    <div className="text-xl font-bold text-gray-800">{Number(totals.calories).toFixed(1)} <span className="text-sm font-normal text-gray-500">kcal</span></div>
                  </div>
                  <div className="bg-green-50 rounded-xl p-4">
                    <div className="text-green-600 font-medium mb-1">Protein</div>
                    <div className="text-2xl font-bold text-gray-800">{Number(totals.protein).toFixed(1)} <span className="text-sm font-normal text-gray-500">g</span></div>
                  </div>
                  <div className="bg-orange-50 rounded-xl p-4">
                    <div className="text-orange-600 font-medium mb-1">Carbs</div>
                    <div className="text-2xl font-bold text-gray-800">{Number(totals.carbs).toFixed(1)} <span className="text-sm font-normal text-gray-500">g</span></div>
                  </div>
                  <div className="bg-purple-50 rounded-xl p-4">
                    <div className="text-purple-600 font-medium mb-1">Fats</div>
                    <div className="text-2xl font-bold text-gray-800">{Number(totals.fat).toFixed(1)} <span className="text-sm font-normal text-gray-500">g</span></div>
                  </div>
                </div>
              ) : (
                <div className="text-center py-8 bg-gray-50 rounded-xl">
                  <svg className="w-12 h-12 text-gray-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                  <p className="text-gray-500 font-medium">No food logged for this date</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default CalendarTracker;
